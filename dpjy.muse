* 引入
** 灵梦的灵符（USACO 1.5.1）
博丽灵梦是东方幻想乡中博丽神社的巫女，她跟幻想乡中最老资格的妖怪八云紫一起维护着隔绝幻想乡与现实世界的大结界，维护现实世界不被幻想乡中的妖怪侵害，幻想乡中的生物也可以自由自在的维持古老的生活方式。但不幸的是，每隔六十年，结界会有一次大异变，为了维护结界的完整，博丽灵梦必须将灵力注入灵符，让灵力以最好的方式游走来修复结界。灵梦的灵符是一个三角形，由一堆数字组成，每个数字表示灵力经过这个位置获得的修复值，三角形共n层，第i层有i个数字，从上方的最尖端注入灵力，灵力只能前往前位置的左下方或者右下方，最终走的下面的边的某个位置释放，问灵梦最多可以获得多少修复值？

** 最容易想到的方法：回溯法
列举每一条可能的路线，分别累加比较每条路线的修复值进行比较，取得最大的一条作为答案。我们先不引入时间复杂度的计算，来用一个n较小的例子手工计算我们需要做的计算量。很明显，对于n＝＝4，共有2^(4-1)＝8条不同的路线，如果不考虑回溯时的计算量，每条路线我们要进行两次加法和一次比较，共24次计算。这很小，但是如果n=100呢？n=1000呢？指数级的运算量将会飞快增长，无法接受
** 为什么会计算那么多次呢？
因为这个算法有天然呆的属性，太健忘了，还是n＝＝4的例子，第四层中间2个点的计算，都用到了第3层中间的点，而中间的点又分别来自第2层的两个点，由乘法原理，分别计算了2*2＝＝4次，正是这种乘法原理造成了指数级的计算量，因为不同路线多次经过同一个点，到这个点为止的最大和其实已经算出来了，可以直接用它来与下面路线获得的修复值相加就可以获得最终的最大值，而回溯法在回溯时会重复计算这个值//其实这就是后面要说的最优子结构
** 换一种方法：
如上所说，到第2层中间点的时候，有两种路线，如果取当前和较大的一种路线记录下来，往下走的时候直接用这个数跟下面点的修复值相加，对于每一层都看做一个这样的问题，也就是到当前位置可以获得的最大值，依次类推。到最下面一层时就获得了原问题答案：到最下面某个位置（也就是最后一层子问题的［当前位置］）的最大修复值。这就是动态规划的算法。
** 这样的计算次数
每个点最多会从它上面的两个点走过来，取它们最优值较大的一个，然后加上这个点的值，共进行1次比较和1次加法，（1+4）*4/2-1=9个点，共计算18次，虽然只少了6次，但n增长时与n^2成正比的计算量就可以接受了。
* 动态规划的定义，特点和适用条件
** 正式的定义：
动态规划(dynamic programming)是运筹学的一个分支，是求解决策过程(decision process)最优化的数学方法。20世纪50年代初美国数学家R.E.Bellman等人在研究多阶段决策过程(multistep decision process)的优化问题时，提出了著名的最优化原理(principle of optimality)，把多阶段过程转化为一系列单阶段问题，逐个求解，创立了解决这类过程优化问题的新方法——动态规划。
** 动态规划就是求解可以划分阶段的最优化问题的方法
效率较高,但有一定的局限性,必须可以划分阶段并满足几个条件.而搜索是一般性的方法,DP一般可将搜索指数级的时间复杂度降低到多项式级别.
** 动态规划的适用条件
这个不是一个纯理论的知识,理解这些可以帮助大家看出来这个题题是考用动态规划求解,也可以通过寻找这些要素来确定方程.至少有一个感性的认识，才能容易想出DP方程
*** 最优子结构
决策经历的路径上,如果当前取得了最优值,那么直接用这个值来参与计算后面的状态能使后面的也最优,而不会是这里小规模的状态选择一个不那么优的状态反而会因为限制条件使后面的状态更优.所以多个决策到达同一个状态，只要比较取一个值最优的保存，忽略其他的。以灵梦的灵符为例:...
*** 无后效性
当前作出决策只会影响后面的状态,不会改变前面的决策,也不会因为前面某些决策而使当前状态能或不能做某个决策,也就是前面的决策的影响都在状态中被包含了,一个状态确定一切,再用来确定后面的状态,有如此一个顺序.例子,比如我加一个限制条件:...
*** 重叠子问题
这个就是说子问题是重叠的,也就是有前所述的那种重复计算的减少,动态规划才能减少算法的运行时间.
** 动态规划的要素
*** 阶段
必须要有一个阶段可以划分,也就是顺序,每个状态属于一个阶段,从而有了前后关系保证最优子结构和无后效性.这种东西在做动态规划题时都比较明显,是前提也是一种特征,容易找到和确定.比如可能是时间的前后，灵梦的灵符那种层次关系等等。
*** 状态
状态是动态规划时操作的对象，它表示我们解到了哪一个子问题，状态通常是1维或者多维的，第一维一般是它所属的阶段，剩下的维记录一些相关信息，也可能是别的形式，比如只是一个“位置”。状态中通常包括对之前的决策造成的结果的全部信息，你可以用这些信息知道可以做那些决策，并且这个决策可以使状态转移到后面阶段的一个状态。
*** 决策
决策是前面阶段的状态向后面的状态转移的操作，这种操作通常取决于题目中的限制条件。比如灵符中的向左下还是右下走。正是决策把各个阶段的状态依次求出，最终求出问题的解。通过转移的行为，通过状态中的信息计算出新的状态信息，并且计算出最优值，多个决策的最优值进行比较取较大的。
** 动态规划的求解模式
划分阶段 设计状态 确定决策写出转移 写出方程和边界
** 动态规划的程序实现
递推：看作递推方程，用循环依次递推出每一个状态 
记忆化搜索：按搜索的方式写，但是对于已经搜索过的状态直接返回最优值，不再次搜索
* 按照方程的形态大致分类的几个例题

**  线性选择 
*** 空的裂解原子核（POJ1887）
灵乌路空有着特别姿态的鸦。左足是“分解之足”、右足是“融合之足”、还有制御两者的右手“第三足”，她以这三足操控著究极的能源。空居住在地灵殿在无聊的时候经常控制原子核进行核裂解来练习自己的能力。她捕捉到了N个原子核，控制每个原子核进行裂解会获得Ci的能量值，她可以依次挑选一个序列进行裂变（不必连续），但是由于她能力的特殊性，她用来裂解的原子核的能量只能越来越低，否则会导致控制失败而造成核反应制御不能的后果。但是空是一个低智力的笨蛋，她想让你帮忙计算她最多可以控制几个原子核进行裂变。
经典的LIS模型，也就是线性选择型的DP
阶段：按顺序处理到哪一个原子核
状态:f[i]表示处理到第i个，且选取第i个的最大序列长度
决策：上一个原子核是哪一个（逆推）
方程f[i]=max(f[j])+1 1<=j<i f[1]=1

** 背包问题
*** 帕秋莉的图书（POJ3624）
帕秋莉诺蕾姬是幻想乡中红魔馆的图书馆管理员，管理着图书馆中10万本魔法书。她总是试图整理这些图书，把质量好的放在一个专门的书架上。这个专用书架承受的最大重量是M，总共有N本候选图书，编号1－n，每本有一个重量和知识值Wi和Ki，她想知道，在书架不会超过承重的情况下，图书的知识值最大。
这个题就是经典的0/1背包模型
阶段：任意一个物品的取与不取造成的影响与它们取的先后无关，所以可以把物品随意排列，以做决定到了哪个物品作为阶段
状态：以f[i][j]表示状态，第一维是阶段，决定我们能不能放入一个物品是剩余的重量，这个信息由之前的决策决定，影响当前的决策，所以应当记录在状态中，所以第2维是当前已经使用的重量，即f[i][j]表示处理到第i个物品，已经使用重量j得到的最大知识值
决策与转移：决策就是对每个物品是否取用，分别转移，取较大的。
方程：f[i][j]=max(f[i-1][j],f[i-1][j-Wi]+Ki) 1=<i<=n 0<=j<=M 后面部分要求Wi<=j f[][0]=0
用递推的方式写出核心代码:

** 区间DP
*** 萃香的的西瓜
伊吹萃香是被赶到幻想乡的鬼，位列鬼族四天王之一，据传为“怪力乱神”四天王中怪的代表。虽然看上去是一个少女，但其实已活了几百年。她有操纵密和疏的能力，可以任意合并和分解周围的东西。幻想乡的夏天的一天，萃香得到了N堆西瓜，她想把这些西瓜合并成一堆，每次只能合并相邻的两堆，合并的代价为这两堆西瓜的数量之和，合并后与这两堆西瓜相邻的西瓜将和新堆相邻，合并时由于选择的顺序不同，合并的总代价也不相同，如有4堆西瓜分别为 1  3  5  2 我们可以先合并1、2堆，代价为4，得到4 5 2 又合并 1，2堆，代价为9，得到9 2 ，再合并得到11，总代价为4+9+11=24，如果第二步是先合并2，3堆，则代价为7，得到4 7，最后一次合并代价为11，总代价为4+7+11=22；问题是：找出一种合理的方法，使总的代价最小。
阶段：顺序排列的西瓜堆将随着合并逐渐减少，可以认为从某个点分开，两边分别合并，最后再合并剩下的两堆，于是，从i到j的长为j-i+1的区间可以认为是阶段
状态：合并过程只与现在合并到了哪个区间有关，f[i][j]表示从i到j合并完成后的最小代价
决策和转移：决策就是应该从区间选哪个点分别合并两边（也就是最后一次合并的位置），从i到J-1选一个位置分开合并
方程：f[i][j]=min(f[i][k]+f[k+1][j]+sum(i,k)+sum(k+1,j)) i<=k<j f[i][i]=0

** TreeDP
*** 美铃的看守方案(POJ1463)
红美铃是一个来自中国的妖精，因为她会一些中国功夫，所以被红魔馆招募做看门人。红魔馆从外面看上去并不是很大，但是由女仆长咲夜控制时间和空间造成的混乱，馆里面空间很大不容易看守。红魔馆内部的建筑房间和道路可以简化成一棵无根树，也就是有N个房间，N-1条路连接这N个房间，并且没有环路。如果美铃在一个房间设置一个监控点，它就可以看守住与这个房间相邻的所有路，她想知道最少设置多少个看守点就能看住所有路。
阶段：树上的DP是很常见的，因为树本身就是递归定义的（。。。），具有明显的层次性和子结构，一般来说一个子树就是一个子结构，随着深度增加阶段自然向后
有根化：通常TreeDP的求解在遍历树的过程中进行，对于大部分题目可以任选一个点作为根进行递归遍历，遍历完子节点以后用子节点的状态最优值更新这个节点的状态
状态：f[t][0..1]表示对于t号节点,0表示在这个点上设置,看住子树的最数,1表示不在这个点设置,看着子树的最小数
决策：状态中其实已经包含了可行的决策：设置在这个点或不设置在这个点。如果设置，对子节点设置或不设置取较小的来求和，最后再＋1，如果不设置，则对子节点设置来求和（原因）
方程:f[t][0]=sum(min(f[j][1],f[j][0]))+1 f[t][1]=sum(f[j][0]) j是t的子节点 如果i是叶子节点：f[i][0]=1 f[i][1]=0


** 其他 可行性 计数 自动机上的DP 贪心DP 集合DP 多进程DP
CDOJ1503 USACO2.3.4 POJ3691 CDOJ1510 

* 动态规划的复杂度优化

** 动态规划的复杂度计算
一个较为通用的计算方法：时间复杂度＝状态总数*决策数*每次决策的时间复杂度 空间复杂度＝状态总数

** 动态规划的空间复杂度优化

*** 使用滚动数组
就是帕秋莉的图书那种问题线性连接的问题，f[i][]只会从f[i-1][]更新，之前的状态值就没用了，不必保存。
*** 避免不必要的状态维

** 动态规划的时间复杂度优化

*** 改变状态表示

*** 利用单调性：单调队列

*** 数形结合：斜率优化

*** 更复杂的例子：单调队列＋高级数据结构
